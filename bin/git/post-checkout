#!/bin/bash
#
# Git hook to automatically execute Composer commands after a Git checkout. If the file "composer.lock" was modified by the
# checkout the command "composer install" is executed. If the file "composer.lock" was not modified by the checkout the
# command "composer dump-autoload" is executed.
#
#
# Notes:
# ------
#  - If the hook is not executed automatically the Composer commands have to be called manually.
#  - Whether or not hooks are executed by a graphical Git replacement depends on the tool. For example the JGit
#    implementation of Eclipse atm does not execute hooks.
#
#
# From the Git hooks documentation:
# ---------------------------------
# This hook is invoked when a git checkout is run after having updated the worktree. The hook is given three parameters: 
# the ref of the previous HEAD, the ref of the new HEAD (which may or may not have changed), and a flag indicating whether 
# the checkout was a branch checkout (changing branches, flag=1) or a file checkout (retrieving files from the index, flag=0). 
# This hook cannot affect the outcome of git checkout.
#
# It is also run after git clone, unless the --no-checkout (-n) option is used. The first parameter given to the hook is the 
# null-ref, the second the ref of the new HEAD and the flag is always 1. Likewise for git worktree add unless --no-checkout 
# is used.
#
# This hook can be used to perform repository validity checks, auto-display differences from the previous HEAD if different, 
# or set working dir metadata properties.
#
set -e


# --- functions -------------------------------------------------------------------------------------------------------------


# print a message to stderr
function error() {
    echo "error: $@" 1>&2
}


# --- end of functions ------------------------------------------------------------------------------------------------------


# execute an existing user hook
[ -x "$0.user" ] && "$0.user" "$@"


# find Composer
COMPOSER=$(type -P composer)
COMPOSER=${COMPOSER:-$(type -P composer.phar)}
[ -z "$COMPOSER" ] && { error "ERROR: could not find Composer"; exit 1; }


# get the changed files from Git
CHANGED_FILES=$(git diff-tree -r --name-only --no-commit-id $1 $2)


# check "composer.lock" for modifications and run the according Composer command
LOCKFILE='composer.lock'

if [[ -f "$LOCKFILE" && $(echo "$CHANGED_FILES" | grep -Fx "$LOCKFILE") ]]; then
    echo " * changes detected in $LOCKFILE"
    echo " * running composer install"
    COMPOSER_ALLOW_SUPERUSER=1 $COMPOSER install --ignore-platform-reqs --no-dev --no-suggest
else
    COMPOSER_ALLOW_SUPERUSER=1 $COMPOSER dump-autoload
fi
