#!/bin/bash
#
# Conveniant wrapper of PHPStan. Simplifies configuration and usage of PHPStan baseline files.
# Supports switching between multiple PHP and/or PHPStan versions. All arguments are optional.
#
# Usage:
#   phpstan [COMMAND] [options] [--] [PATH...]
#
# Command:
#   analyse                                 Analyse the code base using the configuration in "/etc/phpstan/" (default command).
#   analyse PATH                            Analyse a custom PATH (default: the configured paths).
#
# Options:
#   -l, --level=0..9                        Analyse using an explicit rule level (default: the configured rule level).
#   -b, --generate-baseline=BASELINE_FILE   Analyse and save errors to the specified baseline file.
#   -u, --use-baseline=BASELINE_FILE        Analyse using the specified baseline file as a filter.
#   -v|-vv|-vvv                             Verbose output.
#   -h                                      Original PHPStan help.
#
# Short option name/value separator are zero or more spaces.      e.g. "-l3" or "-l 4"
# Long option name/value separator are space or equal sign "=".   e.g. "--level 5" or "--level=6"
#
# By default the script looks for a PHPStan binary installed in the "vendor" directory of the project.
# If PHPStan is not installed in the project the script tries to find a globally installed PHPStan.
# A custom PHPStan binary can be specified by setting the environment variable PHPSTAN='<phpstan-cmd>'.
#
# PHPStan can be executed using a custom PHP interpreter by setting the environment variable PHP='<php-cmd>'.
#
# Examples:
#   phpstan                                 # Analyse the code base with the configured settings.
#   phpstan --level=1 api/app               # Analyse a single directory with a custom rule level.
#   phpstan --level=6 -b baseline.neon      # Analyse the code base and save the result to file "baseline.neon".
#   phpstan --level=7 -u baseline.neon      # Analyse the code base using file "baseline.neon" as a filter.
#   PHP=php81 phpstan                       # Use a different PHP version instead of the standard `php`.
#   PHPSTAN=phpstan-2.1.0.phar phpstan      # Use a different PHPStan version instead of the standard installation.
#
#
# TODO:
#  - include baseline via dynamic PHP include       @see https://phpstan.org/config-reference#multiple-files
#
set -eEuo pipefail

# --- functions ----------------------------------------------------------------------------------------------------------------------------

#
# Print a message to STDERR and exit the script/subshell.
#
# @param $@ - any number of arguments
#
function fail() {
  stderr "$@"
  exit 127
}

#
# Print a message to STDERR but don't exit the script/subshell.
#
# @param $@ - any number of arguments
#
function stderr() {
  echo "$@" >&2
}

# --- end of functions ---------------------------------------------------------------------------------------------------------------------


# determine the PHP interpreter to use
php="${PHP:-php}"

# resolve directories and environment
IS_WINDOWS_PHP="$("$php" -r "echo (int)(PHP_OS_FAMILY == 'Windows');")"
PROJECT_DIR="$(realpath --relative-to=. "$(dirname "$(realpath "$(type -p "$0")")")"/..)"
[[ "$PROJECT_DIR" == /* ]] && ((IS_WINDOWS_PHP)) && PROJECT_DIR="$(cygpath -m "$PROJECT_DIR")"
CONFIG_DIR="$PROJECT_DIR/etc/phpstan"
CONFIG_DIR="${CONFIG_DIR#./}"
AUTOLOAD=

# determine the PHPStan binary to use
phpstan="${PHPSTAN:-}"
phpstanCmd="$phpstan"

if [[ -n "$phpstan" ]]; then
  phpstan="$(type -p "$phpstan")" || fail "PHPStan executable not found: $phpstanCmd"

  # if we are not in PROJECT_DIR then "vendor/autoload.php" must be specified manually
  if [[ "$(pwd -P)" != "$PROJECT_DIR" ]]; then
    AUTOLOAD="$PROJECT_DIR/vendor/autoload.php"
    AUTOLOAD="${AUTOLOAD#./}"
    [[ -f "$AUTOLOAD" ]] || fail "vendor/autoload.php not found"
    AUTOLOAD="--autoload-file=$AUTOLOAD"
  fi
else
  phpstanCmd="vendor/bin/phpstan"
  phpstan="$PROJECT_DIR/$phpstanCmd"
  phpstan="${phpstan#./}"
  if [[ ! -f "$phpstan" ]]; then
    phpstanCmd="phpstan" && phpstan="$(type -p "$phpstanCmd")" || {
      phpstanCmd="phpstan.phar" && phpstan="$(type -p "$phpstanCmd")" || fail "PHPStan executable not found"
    }
  fi
fi
((IS_WINDOWS_PHP)) && phpstan="$(cygpath -m "$phpstan")"          # normalize path if running a Windows PHP version


# parse command line arguments and create a new argument set for PHPStan
ARGS=() && CMD= && CONFIG_OPTION= && CONFIG_FILE= && BASELINE_OPTION= && BASELINE_FILE= && INCLUDE_CONFIG= && VERBOSE_OPTION=

while (("$#")); do
  case "$1" in
    --)                                                           # stop at argument delimiter "--"
      break;;

    -l|-a|-b)
      ARGS+=("$1")
      shift                                                       # shift to short option value
      [[ "$#" -gt 0 && "$1" == -* ]] && continue;;                # skip if it's not an option value

    --level|--autoload-file|--error-format|--generate-baseline|--memory-limit)
      ARGS+=("$1")
      shift                                                       # shift to long option value
      [[ "$#" -gt 0 && "$1" == -* ]] && continue;;                # skip if it's not an option value

    -c|--configuration)                                           # extract config argument but don't add it to PHPStan args
      CONFIG_OPTION="$1"
      [[ "$#" -gt 1 && "$2" != -* ]] && CONFIG_FILE="$2" && shift
      shift
      continue;;
    -c*)
      CONFIG_OPTION='-c'
      CONFIG_FILE="${1#*c}"
      shift
      continue;;
    --configuration=*)
      CONFIG_OPTION='--configuration'
      CONFIG_FILE="${1#*=}"
      shift
      continue;;

    -u|--use-baseline)                                            # extract baseline argument but don't add it to PHPStan args
      BASELINE_OPTION="$1"
      [[ "$#" -gt 1 && "$2" != -* ]] && BASELINE_FILE="$2" && shift
      shift
      continue;;
    -u*)
      BASELINE_OPTION='-u'
      BASELINE_FILE="${1#*u}"
      shift
      continue;;
    --use-baseline=*)
      BASELINE_OPTION='--use-baseline'
      BASELINE_FILE="${1#*=}"
      shift
      continue;;

    -v*)                                                          # extract verbose options
      VERBOSE_OPTION="$1";;

    -*)
      ;;                                                          # skip all other options

    analyse|analyze|clear-result-cache|completion|diagnose|dump-parameters|help|list|worker|fixer:worker)
      CMD="$1"                                                    # 1st non-option must be the subcommand
      break;;

    *)                                                            # stop on unknown subcommand
      break;;
  esac
  (("$#")) && ARGS+=("$1") && shift
done
ARGS+=("$@")


# sanitize the resolved command
USE_DEFAULT=
[[ -z "$CMD" ]] && CMD='analyse' && USE_DEFAULT=1                               # default: analyse
[[ "$CMD" == analyze ]] && CMD='analyse'


# validate config options
if [[ -n "$CONFIG_OPTION" ]]; then
  [[ -z "$CONFIG_FILE" ]] && fail "Option $CONFIG_OPTION needs a value"
  [[ -f "$CONFIG_FILE" ]] || fail "Config file \"$CONFIG_FILE\" not found"
else
  FILES=('phpstan.neon' 'phpstan.neon.dist' 'phpstan.dist.neon')
  for file in "${FILES[@]}"; do
    file="$CONFIG_DIR/$file"
    [[ -f "$file" ]] && CONFIG_FILE="$file" && break
  done
  [[ -z "$CONFIG_FILE" ]] && fail "No config file found in \"$CONFIG_DIR\""
fi
((IS_WINDOWS_PHP)) && CONFIG_FILE="$(cygpath -m "$CONFIG_FILE")"                # normalize path if running a Windows PHP version


# include a specified user baseline
if [[ -n "$BASELINE_OPTION" ]]; then
  if [[ "$CMD" != analyse ]]; then
    [[ -n "$BASELINE_FILE" ]] && ARGS=("$BASELINE_FILE" "${ARGS[@]}")           # non-analyse: pass-through -u
    ARGS=("$BASELINE_OPTION" "${ARGS[@]}")
  else
    # validate baseline option
    [[ -z "$BASELINE_FILE" ]] && fail "Option $BASELINE_OPTION needs a value"
    [[ -f "$BASELINE_FILE" ]] || fail "Baseline file \"$BASELINE_FILE\" not found"

    INCLUDE_CONFIG="$(mktemp --suffix .neon include.XXX)"                       # create tmp file and register it for automatic deletion
    trap "rm -f '$INCLUDE_CONFIG'" EXIT

    ((IS_WINDOWS_PHP)) && BASELINE_FILE="$(cygpath -m "$BASELINE_FILE")"        # normalize path if running a Windows PHP version
    echo "includes:"           > "$INCLUDE_CONFIG"
    echo "  - $CONFIG_FILE"   >> "$INCLUDE_CONFIG"                              # include specified or default config
    echo "  - $BASELINE_FILE" >> "$INCLUDE_CONFIG"                              # include user baseline
  fi
fi


# complete PHPStan arguments
if [[ "$CMD" == 'analyse' || "$CMD" == 'analyze' ]]; then
  ARGS=('--memory-limit=-1' "${ARGS[@]+"${ARGS[@]}"}")                          # prepend memory option
  [[ -n "$AUTOLOAD" ]] && ARGS=("$AUTOLOAD" "${ARGS[@]}")                       # prepend auto-load option
fi
if [[ "$CMD" == 'analyse' || "$CMD" == 'analyze' || "$CMD" == 'clear-result-cache' || "$CMD" == 'diagnose' || "$CMD" == 'dump-parameters' || "$CMD" == 'worker' || "$CMD" == 'fixer:worker' ]]; then
  CONFIG_FILE="${INCLUDE_CONFIG:-$CONFIG_FILE}"
  ARGS=("--configuration=$CONFIG_FILE" "${ARGS[@]}")                            # prepend config file
fi
[[ -n "$USE_DEFAULT" ]] && ARGS=("$CMD" "${ARGS[@]}")                           # prepend default command if empty


# rebuild all positional arguments
set -- "${ARGS[@]}"


# verbose output
[[ -n "$VERBOSE_OPTION" ]] && {
  echo "CMD: $phpstanCmd" "$@"
  [[ "$VERBOSE_OPTION" == -vv* && -n "$INCLUDE_CONFIG" ]] && cat "$INCLUDE_CONFIG"
}


# call PHPStan
"$php" "$phpstan" --ansi "$@"
